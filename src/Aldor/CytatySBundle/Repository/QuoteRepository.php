<?php

namespace Aldor\CytatySBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * QuoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuoteRepository extends EntityRepository
{
    public function getQuoteToList($startdate,$enddate)
    {
        $qb = $this->createQueryBuilder('q')->where('q.date> :startdate and q.date < :enddate')
            ->setParameter('startdate',$startdate)->setParameter('enddate',$enddate)
            ->add('orderBy', 'q.votes DESC');

                $query = $qb->getQuery();
        return $query->getResult();


    }
 public function getQuotesAfter($date)
    {
        $qb = $this->createQueryBuilder('q')->where('q.date> :date')
            ->setParameter('date',$date)
            ->add('orderBy', 'q.votes DESC');

                $query = $qb->getQuery();
        return $query->getResult();


    }
    public function getRandom()
    {

        $maxid = $this->getEntityManager()->createQuery('
            select max(q.id) as id from AldorCytatySBundle:Quote q 
            ')->setMaxResults(1)->getResult();
        $maxid = intval($maxid[0]['id']);
            $randid = rand(1,$maxid);
        $qb = $this->createQueryBuilder('q')->where('q.id >=:randid and q.id<= :randid2')
            ->setParameter('randid', $randid )
            ->setParameter('randid2',$randid + 2)
            ->add('orderBy', 'q.votes DESC')->setMaxResults(1);

                $query = $qb->getQuery();
        return $query->getResult();
    
    
    }
     function getQuoteListCount($startdate,$enddate)
    {
        $qb = $this->re('q.date> :startdate and q.date < :enddate')
            ->setParameter('startdate',startdate)->setParameter('enddate',$enddate)
            ->add('orderBy', 'q.votes DESC')

            ;

        $query = $qb->getQuery();
        return count($query->getResult());

    }
      public function searchAuthor($author)
      {
        $qb = $this->createQueryBuilder('q')->where("lower(q.author) like   lower( :author)  ")
            ->setParameter("author",'%'.$author.'%');

        $query = $qb->getQuery();
        return $query->getResult();


      }
     public function search($what,$value)
      {
        $qb = $this->createQueryBuilder('q')->where("lower(q.".$what.") like   lower( :value)  ")
            ->setParameter("value",'%'.$value.'%');

        $query = $qb->getQuery();
        return $query->getResult();


      }
    public function searchPagination($what,$value)
      {
        $qb = $this->createQueryBuilder('q')->where("lower(q.".$what.") like   lower( :value)  ")
            ->setParameter("value",'%'.$value.'%');

        $query = $qb->getQuery();
        return $query;


      }


    public function searchAjaxText($value)
      {
        $qb = $this->createQueryBuilder('q')->select('q.text')->distinct()->where("lower(q.text) like   lower( :value)  ")
            ->setParameter("value",'%'.$value.'%');

        $query = $qb->getQuery();
        return $query->getResult();


      }
     public function searchAjax($what,$value)
      {
        $qb = $this->createQueryBuilder('q')->select('q.'.$what)->distinct()->where("lower(q.".$what.") like   lower( :value)  ")
            ->setParameter("value",'%'.$value.'%');

        $query = $qb->getQuery();
        return $query->getResult();


    }





}
